package DesignPattern;

/** FactoryMethod:

 * ∆Øu 
    Gi·∫•u ƒëi chi ti·∫øt t·∫°o ƒë·ªëi t∆∞·ª£ng.
    D·ªÖ m·ªü r·ªông: ch·ªâ c·∫ßn th√™m l·ªõp Concrete Product, Concrete Factory m·ªõi. Kh√¥ng s·ª≠a code client.
    Gi·∫£m ph·ª• thu·ªôc gi·ªØa client vs c√°c l·ªõp s·∫£n ph·∫©m c·ª• th·ªÉ.
  
 * Nh∆∞·ª£c 
    T·∫°o th√™m nhi·ªÅu l·ªõp.
    N·∫øu ƒë·ªëi t∆∞·ª£ng ƒë∆°n gi·∫£n, d√πng Factory h∆°i r∆∞·ªùm.

üëâ Factory Method l√† ‚Äúnh√† m√°y‚Äù t·∫°o ra ƒë·ªëi t∆∞·ª£ng. Ch·ªâ c·∫ßn g·ªçi, c√≤n vi·ªác t·∫°o c√°i g√¨ c·ª• th·ªÉ ‚Üí l·ªõp con quy·∫øt ƒë·ªãnh. */

 
interface Product {  // Product
  void display();
}

interface Factory {  // Factory
  Product factoryMethod();
}



// Concrete Products
class Phone implements Product {
  public void display() {
    System.out.println("This is a Phone.");
  }
}

class Laptop implements Product {
  public void display() {
    System.out.println("This is a Laptop.");
  }
}


// Concrete Factories
class PhoneFactory implements Factory {

  public Product factoryMethod() {
    return new Phone();
  }
}

class LaptopFactory implements Factory {

  public Product factoryMethod() {
    return new Laptop();
  }
}



// Client
public class FactoryDP {
  public static void main(String[] args) {
    Factory phoneFactory = new PhoneFactory();

    Product phone = phoneFactory.factoryMethod();
    phone.display();

    
    Factory laptopFactory = new LaptopFactory();
    
    Product laptop = laptopFactory.factoryMethod();
    laptop.display();
  }
}
